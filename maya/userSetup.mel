proc string[] getDisplays()
{
    return python("import PyOpenColorIO as OCIO; config=OCIO.GetCurrentConfig(); config.getDisplays()");
}

proc string getDefaultDisplay()
{
    return python("import PyOpenColorIO as OCIO; config=OCIO.GetCurrentConfig(); config.getDefaultDisplay()");
}

proc string[] getViews(string $display)
{
    return python("import PyOpenColorIO as OCIO; config=OCIO.GetCurrentConfig(); config.getViews('" + $display + "')");
}

proc string getDefaultView(string $display)
{
    return python("import PyOpenColorIO as OCIO; config=OCIO.GetCurrentConfig(); config.getDefaultView('" + $display + "')");
}

proc string getDisplayColorSpaceName(string $display, string $view)
{
    return python("import PyOpenColorIO as OCIO; config=OCIO.GetCurrentConfig(); config.getDisplayColorSpaceName('" + $display + "', '" + $view + "')");
}

proc addDisplayMenuToRenderView()
{
    string $toolbar = "renderViewToolbar";
    
    int $iconSize = 26;
    
    setParent $toolbar;
    
    separator -height $iconSize -horizontal false -style single rvSeparatorDisplay;
    
    optionMenu -height $iconSize
        -label "Display"
        -annotation "Select Display"
        -cc  "cmgmtUpdateCurrentDisplay(\"displaySelOptionMenu\")"
        -parent $toolbar
        displaySelOptionMenu;
    
    string $defaultColorSpace = "";
    if (attributeExists("ocioColorSpace", "defaultViewColorManager")) 
        $defaultColorSpace = `getAttr "defaultViewColorManager.ocioColorSpace"`;
    
    menuItem -l "None" -enableCommandRepeat false "displaySelOptionMenuItemNone";
    
    string $display;
    string $view;
    int $i = 2;
    for($display in getDisplays())
    {
        for($view in getViews($display))
        {
            string $viewUIName = ($view + " (" + $display + ")");
            menuItem -l $viewUIName -enableCommandRepeat false ("displaySelOptionMenuItem" + $display + $view);
     
            // use the color space set in the viewColorManager node, if any
            if (getDisplayColorSpaceName($display, $view) == $defaultColorSpace)
                    optionMenu -edit -select $i displaySelOptionMenu;

            $i++;                
        }
    }
    
    cmgmtUpdateCurrentDisplay("displaySelOptionMenu");
}

global proc cmgmtUpdateCurrentDisplay(string $widget)
{
    string $menuItems[] = `optionMenu -q -itemListLong $widget`;
    int $selected = `optionMenu -q -select $widget`;

    // special case: "None"
    // this resets color management back to Maya's defaults
    if ($selected == 1)
    {
        cmgmtClearViewColorSpace();
    }
    else
    {
        string $values[];
        int $i;
        for($i=0; $i < size($menuItems); $i++)
            $values[$i] = `menuItem -q -label $menuItems[$i]`;
        
        string $buffer[];
        int $n = `tokenize $values[$selected-1] " ()" $buffer`;
        
        string $display = $buffer[1];
        string $view = $buffer[0];
        
        string $colorSpace = getDisplayColorSpaceName($display, $view);
    
        print ("display: " + $display + ", view: " + $view + ", colorSpace: " + $colorSpace + "\n");
    
        cmgmtSetViewColorSpace($colorSpace);
    }    
}

global proc cmgmtClearViewColorSpace()
{
    setAttr -type "string" "defaultViewColorManager.lutFile" "";
    if (attributeExists("ocioColorSpace", "defaultViewColorManager"))
        deleteAttr "defaultViewColorManager.ocioColorSpace";
    setAttr "defaultViewColorManager.imageColorProfile" 3;   // sRGB 
    setAttr "defaultViewColorManager.displayColorProfile" 3; // sRGB
}

global proc cmgmtSetViewColorSpace(string $colorSpace)
{
    // build the LUT path
    string $lutDir = (`workspace -q -rd` + "luts");
    
    workspace -create $lutDir;
    
    string $lutPath = ($lutDir + "/" + $colorSpace + ".csp");

    // bake out a LUT
    system("ociobakelut --inputspace scene_linear --shaperspace lg10 --outputspace " + $colorSpace + " --format cinespace " + $lutPath);

    setAttr -type "string" "defaultViewColorManager.lutFile" $lutPath;

    // set both image and display to "linear", since we're using a LUT for all color transforms
    setAttr "defaultViewColorManager.imageColorProfile" 2; 
    setAttr "defaultViewColorManager.displayColorProfile" 2;
    
    // add an attribute to the viewColorManager so we can save the color space name as well
    if (!attributeExists("ocioColorSpace", "defaultViewColorManager"))
    {
        addAttr -sn "ociocs" -ln "ocioColorSpace" -dt "string" defaultViewColorManager;
    }
        
    setAttr -type "string" "defaultViewColorManager.ocioColorSpace" $colorSpace;
}

global proc cmgmtAddRenderWindowPanel(string $editor)
{
    addRenderWindowPanel($editor);
    addDisplayMenuToRenderView();
}

// shim the callback so we can add our own UI
scriptedPanelType -e -addCallback "cmgmtAddRenderWindowPanel" renderWindowPanel;


// render settings
setAttr "defaultRenderGlobals.colorProfileEnabled" 1;
setAttr "defaultRenderGlobals.renderingColorProfile" 2; // linear
setAttr "defaultRenderGlobals.inputColorProfile" 3;     // sRGB
setAttr "defaultRenderGlobals.outputColorProfile" 2;    // linear

setAttr "miDefaultFramebuffer.datatype" 16;